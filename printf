
void remove_BarrierEdge_from_polygon(int *poly, int length_poly, int *poly1, int *length_poly1, int *poly2, int *length_poly2, int num_BE, int *triangles, int *adj, double *r, int tnumber){
    double A_poly, A1, A2, opt, r_prev, r_act;
    int v_be, t, v_other, aux, origen;

    /*se calculca el valor optimo para el poligono */
    A_poly = get_area_poly(poly, length_poly,r);
    opt = A_poly/(num_BE+1);

/*
    printf("A: %.2lf, opt = %.2lf, numBE = %d\n", A_poly, opt, num_BE);
    print_poly(poly, length_poly);
*/

    /* se calcula el vertice a insertar en el polygono */
    v_be = get_vertex_BarrierEdge(poly, length_poly);
    t = search_triangle_by_vertex_with_FrontierEdge(v_be, triangles, adj, tnumber);
    v_other = search_next_vertex_to_split(t, v_be, -2, triangles, adj);
/*
    printf("%d-%d ",v_be, v_other);
    printf("%d\n",t);
*/
    /* Se divide el polygono en dos */
    split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
/*
    print_poly(poly1, *length_poly1);
    print_poly(poly2, *length_poly2);
*/

    A1 =get_area_poly(poly1, *length_poly1,r);
    A2 = get_area_poly(poly2, *length_poly2,r);

    /* se calcula el r */
    r_prev = fabs(fmin(A1, A2) - opt);
    r_act = 0.0;

/*    printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);
*/
    origen = t;
    printf("\n");
    while (1){
        aux = t;
        t = get_adjacent_triangle_share_endpoint(t, origen, v_be, triangles, adj);
        origen = aux;
        v_other = search_next_vertex_to_split(t, v_be, origen, triangles, adj);
        
/*
        printf("%d-%d ",v_be, v_other);
        printf(" | nuevo t = %d | origen = %d\n",t, origen);
*/
        split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
        print_poly(poly1, *length_poly1);
        print_poly(poly2, *length_poly2);
        A1 =get_area_poly(poly1, *length_poly1,r);
        A2 = get_area_poly(poly2,*length_poly2,r);
        
        r_act = fabs(fmin(A1, A2) - opt);
  /*      printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);
  */
        if (r_act <= r_prev)
            r_prev = r_act;
        else{
            /*printf("SALI!!!!\n");*/
            v_other = search_prev_vertex_to_split(t, v_be, origen, triangles, adj);
            split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
            break;
        }
        /*printf("\n\n");*/
    }
    /*
    printf("%d-%d ",v_be, v_other);
    printf("%d\n",t);
    print_poly(poly1, *length_poly1);
    print_poly(poly2, *length_poly2);
    
    A1 =get_area_poly(poly1, *length_poly1,r);
    A2 = get_area_poly(poly2,* length_poly2,r);
    printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);*/
}