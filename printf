/*
caso raro
num_be 7

(75) z01 1502 387 240 3507 4893 4976 3647 3669 8684 1550 8684 3667 5131 141 7845 9935 7396 4376 7396 7777 773 3359 773 7404 20 7571 4259 7958 6875 7958 4259 4518 7815 3906 4335 2957 2122 2163 2122 1863 7343 6997 5531 5343 1949 6401 6342 9810 5682 9889 8259 7904 5347 1091 5987 3761 2084 1833 2084 4040

*/



int generate_polygon(int * poly, int * triangles, int * adj, double *r, int * visited, int i, int adj_counter) {
    int ind_poly = 0;
	
	int initial_point = 0;
	int end_point = 0;
	
	int t0;
	int t1;	
	int t2;
	int continuous;
	int k, aux;
	int origen;
    /*si tiene 3 se agregan y se corta el ciclo*/
    if (adj_counter == 3) {
        debug_print("T %d Tiene 3 Barrier edge, se guardan así\n", i);
        poly[ind_poly] = triangles[3 * i + 0];
        ind_poly++;
        poly[ind_poly] = triangles[3 * i + 1];
        ind_poly++;
        poly[ind_poly] = triangles[3 * i + 2];
        ind_poly++;

        visited[i] = TRUE;

    } else {
        debug_print("T %d Tiene 2 Barrier edge, es oreja, se usa como semilla para generar el poly\n", i);
        /*si tiene dos FE se agregan y se empieza el ciclo*/
        t0 = adj[3 * i + 0];
        t1 = adj[3 * i + 1];
        t2 = adj[3 * i + 2];
        /*fprintf(stderr,"\n \n \ni %d t %d %d %d \n", i, t0, t1, t2);*/
        if (t0 == NO_ADJ && t1 == NO_ADJ) {

            poly[ind_poly] = triangles[3 * i + 1];
            ind_poly++;
            poly[ind_poly] = triangles[3 * i + 2];
            ind_poly++;

            initial_point = triangles[3 * i + 1];
            end_point = triangles[3 * i + 0];

        } else if (t2 == NO_ADJ && t0 == NO_ADJ) {

            poly[ind_poly] = triangles[3 * i + 0];
            ind_poly++;
            poly[ind_poly] = triangles[3 * i + 1];
            ind_poly++;

            initial_point = triangles[3 * i + 0];
            end_point = triangles[3 * i + 2];

        } else if (t1 == NO_ADJ && t2 == NO_ADJ) {
            poly[ind_poly] = triangles[3 * i + 2];
            ind_poly++;
            poly[ind_poly] = triangles[3 * i + 0];
            ind_poly++;

            end_point = triangles[3 * i + 1];
            initial_point = triangles[3 * i + 2];
        } else {
            fprintf(stderr, "** ERROR ** Choosing initial point and endpoint\n");
            exit(0);
        }

        /*se marca como visitado */
        visited[i] = TRUE;
        adj_counter = 0;
        k = i;
        aux = k;
        k = get_adjacent_triangle_share_endpoint(k, k, end_point, triangles, adj); /* cambia el indice */
        continuous = is_continuous(k, end_point, triangles);
        origen = aux;
//        debug_print("k %d origen %d, conti %d\n", k, origen, continuous);
        debug_print("T_inicial %d | Triangles %d %d %d | ADJ  %d %d %d\n", i, triangles[3*i + 0], triangles[3*i + 1], triangles[3*i + 2], adj[3*i + 0], adj[3*i + 1], adj[3*i + 2]);
        debug_print("initial_point %d endpoint %d\n", initial_point, end_point);
        while (initial_point != end_point) {

            /*se marca el triangulo visto como visitado y se suma al area del poligono */
            
            visited[k] = TRUE;
            t0 = adj[3 * k + 0];
            t1 = adj[3 * k + 1];
            t2 = adj[3 * k + 2];

            adj_counter = count_FrontierEdges(k, adj);
            debug_print("FE %d | origen %d t %d | Triangles %d %d %d | ADJ  %d %d %d\n", adj_counter, origen, k, triangles[3*k + 0], triangles[3*k + 1], triangles[3*k + 2], adj[3*k + 0], adj[3*k + 1], adj[3*k + 2]);
            if (adj_counter == 2 && continuous != -1) {
                /* ///////////////////si tiene 2 frontier edge se agregan a poly //////////////////////////////////// */

                if (t0 == NO_ADJ && t1 == NO_ADJ) {
                    /*si endpoint es continua a t0  y t0-t1 son fe*/
                    if (continuous == 1) {
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;

                        end_point = triangles[3 * k + 0];

                    } else if (continuous == 0) {
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;

                        end_point = triangles[3 * k + 1];
                    }
                } else if (t2 == NO_ADJ && t0 == NO_ADJ) {
                    /*si endpoint es continua a t2  y t2-t0 son fe*/
                    if (continuous == 0) {
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;

                        end_point = triangles[3 * k + 2];

                    } else if (continuous == 2) {
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;

                        end_point = triangles[3 * k + 0];

                    }
                } else if (t1 == NO_ADJ && t2 == NO_ADJ) {
                    /*si endpoint es continua a t1 y t1-t2 son fe*/
                    if (continuous == 2) {
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;

                        end_point = triangles[3 * k + 1];

                    } else if (continuous == 1) {
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;

                        end_point = triangles[3 * k + 2];

                    }
                } else {
                    fprintf(stderr, "** ERROR ** Adding 2 fronter edges\n");
                    fprintf(stderr, "** ERROR ** k %d t %d %d %d ini %d end %d \n", k, t0, t1, t2, initial_point, end_point);
                }

                aux = k;
                k = get_adjacent_triangle_share_endpoint(k, -1, end_point, triangles, adj); /* se le permite volver al triangulo anterior */
                continuous = is_continuous(k, end_point, triangles);
                origen = aux;

            } else if (adj_counter == 1 && continuous != -1) {
                /* ///////////////////si solo se tiene 1 frontier edge //////////////////////////////////// */
                if (t0 == NO_ADJ) {
                    /*si endpoint es continua a t0  y t0 es fe*/
                    if (continuous == 1) {
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;

                        end_point = triangles[3 * k + 2];

                    } else if (continuous == 2) {
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;

                        end_point = triangles[3 * k + 1];

                    }
                } else if (t2 == NO_ADJ) {
                    /*si endpoint es continua a t2  y t2 es fe*/
                    if (continuous == 0) {
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;

                        end_point = triangles[3 * k + 1];

                    } else if (continuous == 1) {
                        poly[ind_poly] = triangles[3 * k + 1];
                        ind_poly++;

                        end_point = triangles[3 * k + 0];

                    }
                } else if (t1 == NO_ADJ) {
                    /*si endpoint es continua a t1  y t1 es fe*/
                    if (continuous == 2) {
                        poly[ind_poly] = triangles[3 * k + 2];
                        ind_poly++;

                        end_point = triangles[3 * k + 0];

                    } else if (continuous == 0) {
                        poly[ind_poly] = triangles[3 * k + 0];
                        ind_poly++;

                        end_point = triangles[3 * k + 2];

                    }
                } else {
                    fprintf(stderr, "** ERROR ** Adding 1 fronter edges\n");
                    fprintf(stderr, "** ERROR ** k %d t %d %d %d ini %d end %d conti %d\n", k, t0, t1, t2, initial_point, end_point, continuous);
                }
                /*si es continuo y tiene 1 fe no puede volver, ind si se guarda  o no*/
                aux = k;
                k = get_adjacent_triangle_share_endpoint(k, origen, end_point, triangles, adj); /* cambia el indice */
                continuous = is_continuous(k, end_point, triangles);
                origen = aux;
            } else {
                /*si no es continuo no puede regresar de donde venía*/
                aux = k;
                k = get_adjacent_triangle_share_endpoint(k, origen, end_point, triangles, adj); /* cambia el indice */
                continuous = is_continuous(k, end_point, triangles);
                origen = aux;
            }

        }
    }
    return ind_poly;
}
*/

void remove_BarrierEdge_from_polygon(int *poly, int length_poly, int *poly1, int *length_poly1, int *poly2, int *length_poly2, int num_BE, int *triangles, int *adj, double *r, int tnumber){
    double A_poly, A1, A2, opt, r_prev, r_act;
    int v_be, t, v_other, aux, origen;

    /*se calculca el valor optimo para el poligono */
    A_poly = get_area_poly(poly, length_poly,r);
    opt = A_poly/(num_BE+1);

/*
    printf("A: %.2lf, opt = %.2lf, numBE = %d\n", A_poly, opt, num_BE);
    print_poly(poly, length_poly);
*/

    /* se calcula el vertice a insertar en el polygono */
    v_be = get_vertex_BarrierEdge(poly, length_poly);
    t = search_triangle_by_vertex_with_FrontierEdge(v_be, triangles, adj, tnumber);
    v_other = search_next_vertex_to_split(t, v_be, -2, triangles, adj);
/*
    printf("%d-%d ",v_be, v_other);
    printf("%d\n",t);
*/
    /* Se divide el polygono en dos */
    split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
/*
    print_poly(poly1, *length_poly1);
    print_poly(poly2, *length_poly2);
*/

    A1 =get_area_poly(poly1, *length_poly1,r);
    A2 = get_area_poly(poly2, *length_poly2,r);

    /* se calcula el r */
    r_prev = fabs(fmin(A1, A2) - opt);
    r_act = 0.0;

/*    printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);
*/
    origen = t;
    printf("\n");
    while (1){
        aux = t;
        t = get_adjacent_triangle_share_endpoint(t, origen, v_be, triangles, adj);
        origen = aux;
        v_other = search_next_vertex_to_split(t, v_be, origen, triangles, adj);
        
/*
        printf("%d-%d ",v_be, v_other);
        printf(" | nuevo t = %d | origen = %d\n",t, origen);
*/
        split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
        print_poly(poly1, *length_poly1);
        print_poly(poly2, *length_poly2);
        A1 =get_area_poly(poly1, *length_poly1,r);
        A2 = get_area_poly(poly2,*length_poly2,r);
        
        r_act = fabs(fmin(A1, A2) - opt);
  /*      printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);
  */
        if (r_act <= r_prev)
            r_prev = r_act;
        else{
            /*printf("SALI!!!!\n");*/
            v_other = search_prev_vertex_to_split(t, v_be, origen, triangles, adj);
            split_poly(poly, length_poly, poly1, &(*length_poly1), poly2, &(*length_poly2), v_be, v_other);
            break;
        }
        /*printf("\n\n");*/
    }
    /*
    printf("%d-%d ",v_be, v_other);
    printf("%d\n",t);
    print_poly(poly1, *length_poly1);
    print_poly(poly2, *length_poly2);
    
    A1 =get_area_poly(poly1, *length_poly1,r);
    A2 = get_area_poly(poly2,* length_poly2,r);
    printf("A: %.2lf, A1: %.2lf, A2:  %.2lf, A1/A = %.2lf, A2/A = %.2lf, r_prev = %.2lf, r_act = %.2lf\n", A_poly, A1 , A2,  A1/A_poly, A2/A_poly, r_prev, r_act);*/
}